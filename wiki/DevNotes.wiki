#summary Development notes in free style
#labels Phase-Design

== TODOs ==

  * fatal error
  * process local storage (alloc many times, free once on process termination)
  * implement http protocol (by using getline, hash table to store headers, arch should be able to serve as server, gateway and proxy)
  * fastcgi pool (migrate from [http://code.google.com/p/icyhttpd/source/browse/?r=13 rev 13])
  * hash table (migrate from [http://code.google.com/p/icyhttpd/source/browse/?r=13 rev 13])
  * fifo pipe (migrate from [http://code.google.com/p/icyhttpd/source/browse/?r=13 rev 13], if needed)
  * utf8 string data structure (do we need size field?)

== server arch ==

a server has:
  * multiple endpoints (ipv4, ipv6, etc.)
  * multiple nodes
  * multiple handlers

an endpoint has:
  * multiple bindings <host, node>
  * at most one non-host binding
  * at most one proxy

a node is:
  * a real directory on file system, or
  * a virtual directory, or
  * a handler

a virtual directory has:
  * multiple bindings <name, virtual_dir>
  * a handler list, sorted by priority (which can be filesystem, fastcgi, etc.)
  * an error handler (if needed?)

a handler is a component implements an specified interface, which can be (at least):
  * a real file on file system (maybe buffered?)
  * a fastcgi handler

== interface ==

node:
  * parse(node, parse_context, request) -> node
  * is_handler() -> bool
  * can_handle(node, request) -> bool
  * handle(node, request) -> response